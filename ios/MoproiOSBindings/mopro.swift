// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(semaphore_bindingsFFI)
import semaphore_bindingsFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_semaphore_bindings_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_semaphore_bindings_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureSemaphoreBindingsInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




public protocol GroupProtocol: AnyObject {
    
    func addMember(member: Data) throws 
    
    func addMembers(members: [Data]) throws 
    
    func depth()  -> UInt32
    
    func indexOf(member: Data)  -> UInt32?
    
    func members()  -> [Data]
    
    func removeMember(index: UInt32) throws 
    
    func root()  -> Data?
    
    func updateMember(index: UInt32, member: Data) throws 
    
}
open class Group: GroupProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_semaphore_bindings_fn_clone_group(self.pointer, $0) }
    }
public convenience init(members: [Data]) {
    let pointer =
        try! rustCall() {
    uniffi_semaphore_bindings_fn_constructor_group_new(
        FfiConverterSequenceData.lower(members),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_semaphore_bindings_fn_free_group(pointer, $0) }
    }

    

    
open func addMember(member: Data)throws   {try rustCallWithError(FfiConverterTypeGroupError_lift) {
    uniffi_semaphore_bindings_fn_method_group_add_member(self.uniffiClonePointer(),
        FfiConverterData.lower(member),$0
    )
}
}
    
open func addMembers(members: [Data])throws   {try rustCallWithError(FfiConverterTypeGroupError_lift) {
    uniffi_semaphore_bindings_fn_method_group_add_members(self.uniffiClonePointer(),
        FfiConverterSequenceData.lower(members),$0
    )
}
}
    
open func depth() -> UInt32  {
    return try!  FfiConverterUInt32.lift(try! rustCall() {
    uniffi_semaphore_bindings_fn_method_group_depth(self.uniffiClonePointer(),$0
    )
})
}
    
open func indexOf(member: Data) -> UInt32?  {
    return try!  FfiConverterOptionUInt32.lift(try! rustCall() {
    uniffi_semaphore_bindings_fn_method_group_index_of(self.uniffiClonePointer(),
        FfiConverterData.lower(member),$0
    )
})
}
    
open func members() -> [Data]  {
    return try!  FfiConverterSequenceData.lift(try! rustCall() {
    uniffi_semaphore_bindings_fn_method_group_members(self.uniffiClonePointer(),$0
    )
})
}
    
open func removeMember(index: UInt32)throws   {try rustCallWithError(FfiConverterTypeGroupError_lift) {
    uniffi_semaphore_bindings_fn_method_group_remove_member(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(index),$0
    )
}
}
    
open func root() -> Data?  {
    return try!  FfiConverterOptionData.lift(try! rustCall() {
    uniffi_semaphore_bindings_fn_method_group_root(self.uniffiClonePointer(),$0
    )
})
}
    
open func updateMember(index: UInt32, member: Data)throws   {try rustCallWithError(FfiConverterTypeGroupError_lift) {
    uniffi_semaphore_bindings_fn_method_group_update_member(self.uniffiClonePointer(),
        FfiConverterUInt32.lower(index),
        FfiConverterData.lower(member),$0
    )
}
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGroup: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Group

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Group {
        return Group(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Group) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Group {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Group, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGroup_lift(_ pointer: UnsafeMutableRawPointer) throws -> Group {
    return try FfiConverterTypeGroup.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGroup_lower(_ value: Group) -> UnsafeMutableRawPointer {
    return FfiConverterTypeGroup.lower(value)
}






public protocol IdentityProtocol: AnyObject {
    
    /**
     * Getter for commitment
     */
    func commitment()  -> String
    
    /**
     * Getter for private_key
     */
    func privateKey()  -> Data
    
    /**
     * Getter for secret_scalar
     */
    func secretScalar()  -> String
    
    func toElement()  -> Data
    
}
open class Identity: IdentityProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_semaphore_bindings_fn_clone_identity(self.pointer, $0) }
    }
    /**
     * Constructor exposed to UniFFI
     */
public convenience init(privateKey: Data) {
    let pointer =
        try! rustCall() {
    uniffi_semaphore_bindings_fn_constructor_identity_new(
        FfiConverterData.lower(privateKey),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_semaphore_bindings_fn_free_identity(pointer, $0) }
    }

    

    
    /**
     * Getter for commitment
     */
open func commitment() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_semaphore_bindings_fn_method_identity_commitment(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Getter for private_key
     */
open func privateKey() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_semaphore_bindings_fn_method_identity_private_key(self.uniffiClonePointer(),$0
    )
})
}
    
    /**
     * Getter for secret_scalar
     */
open func secretScalar() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_semaphore_bindings_fn_method_identity_secret_scalar(self.uniffiClonePointer(),$0
    )
})
}
    
open func toElement() -> Data  {
    return try!  FfiConverterData.lift(try! rustCall() {
    uniffi_semaphore_bindings_fn_method_identity_to_element(self.uniffiClonePointer(),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeIdentity: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Identity

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Identity {
        return Identity(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Identity) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Identity {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Identity, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIdentity_lift(_ pointer: UnsafeMutableRawPointer) throws -> Identity {
    return try FfiConverterTypeIdentity.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIdentity_lower(_ value: Identity) -> UnsafeMutableRawPointer {
    return FfiConverterTypeIdentity.lower(value)
}




public struct CircomProof {
    public var a: G1
    public var b: G2
    public var c: G1
    public var `protocol`: String
    public var curve: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(a: G1, b: G2, c: G1, `protocol`: String, curve: String) {
        self.a = a
        self.b = b
        self.c = c
        self.`protocol` = `protocol`
        self.curve = curve
    }
}

#if compiler(>=6)
extension CircomProof: Sendable {}
#endif


extension CircomProof: Equatable, Hashable {
    public static func ==(lhs: CircomProof, rhs: CircomProof) -> Bool {
        if lhs.a != rhs.a {
            return false
        }
        if lhs.b != rhs.b {
            return false
        }
        if lhs.c != rhs.c {
            return false
        }
        if lhs.`protocol` != rhs.`protocol` {
            return false
        }
        if lhs.curve != rhs.curve {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(a)
        hasher.combine(b)
        hasher.combine(c)
        hasher.combine(`protocol`)
        hasher.combine(curve)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCircomProof: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CircomProof {
        return
            try CircomProof(
                a: FfiConverterTypeG1.read(from: &buf), 
                b: FfiConverterTypeG2.read(from: &buf), 
                c: FfiConverterTypeG1.read(from: &buf), 
                protocol: FfiConverterString.read(from: &buf), 
                curve: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: CircomProof, into buf: inout [UInt8]) {
        FfiConverterTypeG1.write(value.a, into: &buf)
        FfiConverterTypeG2.write(value.b, into: &buf)
        FfiConverterTypeG1.write(value.c, into: &buf)
        FfiConverterString.write(value.`protocol`, into: &buf)
        FfiConverterString.write(value.curve, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCircomProof_lift(_ buf: RustBuffer) throws -> CircomProof {
    return try FfiConverterTypeCircomProof.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCircomProof_lower(_ value: CircomProof) -> RustBuffer {
    return FfiConverterTypeCircomProof.lower(value)
}


public struct CircomProofResult {
    public var proof: CircomProof
    public var inputs: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(proof: CircomProof, inputs: [String]) {
        self.proof = proof
        self.inputs = inputs
    }
}

#if compiler(>=6)
extension CircomProofResult: Sendable {}
#endif


extension CircomProofResult: Equatable, Hashable {
    public static func ==(lhs: CircomProofResult, rhs: CircomProofResult) -> Bool {
        if lhs.proof != rhs.proof {
            return false
        }
        if lhs.inputs != rhs.inputs {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(proof)
        hasher.combine(inputs)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCircomProofResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CircomProofResult {
        return
            try CircomProofResult(
                proof: FfiConverterTypeCircomProof.read(from: &buf), 
                inputs: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: CircomProofResult, into buf: inout [UInt8]) {
        FfiConverterTypeCircomProof.write(value.proof, into: &buf)
        FfiConverterSequenceString.write(value.inputs, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCircomProofResult_lift(_ buf: RustBuffer) throws -> CircomProofResult {
    return try FfiConverterTypeCircomProofResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCircomProofResult_lower(_ value: CircomProofResult) -> RustBuffer {
    return FfiConverterTypeCircomProofResult.lower(value)
}


public struct G1 {
    public var x: String
    public var y: String
    public var z: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(x: String, y: String, z: String) {
        self.x = x
        self.y = y
        self.z = z
    }
}

#if compiler(>=6)
extension G1: Sendable {}
#endif


extension G1: Equatable, Hashable {
    public static func ==(lhs: G1, rhs: G1) -> Bool {
        if lhs.x != rhs.x {
            return false
        }
        if lhs.y != rhs.y {
            return false
        }
        if lhs.z != rhs.z {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(x)
        hasher.combine(y)
        hasher.combine(z)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeG1: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> G1 {
        return
            try G1(
                x: FfiConverterString.read(from: &buf), 
                y: FfiConverterString.read(from: &buf), 
                z: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: G1, into buf: inout [UInt8]) {
        FfiConverterString.write(value.x, into: &buf)
        FfiConverterString.write(value.y, into: &buf)
        FfiConverterString.write(value.z, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeG1_lift(_ buf: RustBuffer) throws -> G1 {
    return try FfiConverterTypeG1.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeG1_lower(_ value: G1) -> RustBuffer {
    return FfiConverterTypeG1.lower(value)
}


public struct G2 {
    public var x: [String]
    public var y: [String]
    public var z: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(x: [String], y: [String], z: [String]) {
        self.x = x
        self.y = y
        self.z = z
    }
}

#if compiler(>=6)
extension G2: Sendable {}
#endif


extension G2: Equatable, Hashable {
    public static func ==(lhs: G2, rhs: G2) -> Bool {
        if lhs.x != rhs.x {
            return false
        }
        if lhs.y != rhs.y {
            return false
        }
        if lhs.z != rhs.z {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(x)
        hasher.combine(y)
        hasher.combine(z)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeG2: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> G2 {
        return
            try G2(
                x: FfiConverterSequenceString.read(from: &buf), 
                y: FfiConverterSequenceString.read(from: &buf), 
                z: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: G2, into buf: inout [UInt8]) {
        FfiConverterSequenceString.write(value.x, into: &buf)
        FfiConverterSequenceString.write(value.y, into: &buf)
        FfiConverterSequenceString.write(value.z, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeG2_lift(_ buf: RustBuffer) throws -> G2 {
    return try FfiConverterTypeG2.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeG2_lower(_ value: G2) -> RustBuffer {
    return FfiConverterTypeG2.lower(value)
}


public struct Halo2ProofResult {
    public var proof: Data
    public var inputs: Data

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(proof: Data, inputs: Data) {
        self.proof = proof
        self.inputs = inputs
    }
}

#if compiler(>=6)
extension Halo2ProofResult: Sendable {}
#endif


extension Halo2ProofResult: Equatable, Hashable {
    public static func ==(lhs: Halo2ProofResult, rhs: Halo2ProofResult) -> Bool {
        if lhs.proof != rhs.proof {
            return false
        }
        if lhs.inputs != rhs.inputs {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(proof)
        hasher.combine(inputs)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHalo2ProofResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Halo2ProofResult {
        return
            try Halo2ProofResult(
                proof: FfiConverterData.read(from: &buf), 
                inputs: FfiConverterData.read(from: &buf)
        )
    }

    public static func write(_ value: Halo2ProofResult, into buf: inout [UInt8]) {
        FfiConverterData.write(value.proof, into: &buf)
        FfiConverterData.write(value.inputs, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHalo2ProofResult_lift(_ buf: RustBuffer) throws -> Halo2ProofResult {
    return try FfiConverterTypeHalo2ProofResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHalo2ProofResult_lower(_ value: Halo2ProofResult) -> RustBuffer {
    return FfiConverterTypeHalo2ProofResult.lower(value)
}


public enum GroupError {

    
    
    case EmptyLeaf
    case InvalidMemberLength
    case RemovedMember
    case AlreadyRemovedMember
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGroupError: FfiConverterRustBuffer {
    typealias SwiftType = GroupError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GroupError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .EmptyLeaf
        case 2: return .InvalidMemberLength
        case 3: return .RemovedMember
        case 4: return .AlreadyRemovedMember

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: GroupError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .EmptyLeaf:
            writeInt(&buf, Int32(1))
        
        
        case .InvalidMemberLength:
            writeInt(&buf, Int32(2))
        
        
        case .RemovedMember:
            writeInt(&buf, Int32(3))
        
        
        case .AlreadyRemovedMember:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGroupError_lift(_ buf: RustBuffer) throws -> GroupError {
    return try FfiConverterTypeGroupError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGroupError_lower(_ value: GroupError) -> RustBuffer {
    return FfiConverterTypeGroupError.lower(value)
}


extension GroupError: Equatable, Hashable {}



extension GroupError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



public enum MoproError {

    
    
    case CircomError(String
    )
    case Halo2Error(String
    )
    case NoirError(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMoproError: FfiConverterRustBuffer {
    typealias SwiftType = MoproError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MoproError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .CircomError(
            try FfiConverterString.read(from: &buf)
            )
        case 2: return .Halo2Error(
            try FfiConverterString.read(from: &buf)
            )
        case 3: return .NoirError(
            try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MoproError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .CircomError(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .Halo2Error(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .NoirError(v1):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMoproError_lift(_ buf: RustBuffer) throws -> MoproError {
    return try FfiConverterTypeMoproError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMoproError_lower(_ value: MoproError) -> RustBuffer {
    return FfiConverterTypeMoproError.lower(value)
}


extension MoproError: Equatable, Hashable {}



extension MoproError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}



public enum ProofError {

    
    
    case InvalidGroup
    case InvalidProof
    case InvalidProofExport
    case InvalidProofImport
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProofError: FfiConverterRustBuffer {
    typealias SwiftType = ProofError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProofError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidGroup
        case 2: return .InvalidProof
        case 3: return .InvalidProofExport
        case 4: return .InvalidProofImport

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ProofError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .InvalidGroup:
            writeInt(&buf, Int32(1))
        
        
        case .InvalidProof:
            writeInt(&buf, Int32(2))
        
        
        case .InvalidProofExport:
            writeInt(&buf, Int32(3))
        
        
        case .InvalidProofImport:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofError_lift(_ buf: RustBuffer) throws -> ProofError {
    return try FfiConverterTypeProofError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofError_lower(_ value: ProofError) -> RustBuffer {
    return FfiConverterTypeProofError.lower(value)
}


extension ProofError: Equatable, Hashable {}



extension ProofError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum ProofLib {
    
    case arkworks
    case rapidsnark
}


#if compiler(>=6)
extension ProofLib: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeProofLib: FfiConverterRustBuffer {
    typealias SwiftType = ProofLib

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ProofLib {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .arkworks
        
        case 2: return .rapidsnark
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ProofLib, into buf: inout [UInt8]) {
        switch value {
        
        
        case .arkworks:
            writeInt(&buf, Int32(1))
        
        
        case .rapidsnark:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofLib_lift(_ buf: RustBuffer) throws -> ProofLib {
    return try FfiConverterTypeProofLib.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeProofLib_lower(_ value: ProofLib) -> RustBuffer {
    return FfiConverterTypeProofLib.lower(value)
}


extension ProofLib: Equatable, Hashable {}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceData: FfiConverterRustBuffer {
    typealias SwiftType = [Data]

    public static func write(_ value: [Data], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterData.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Data] {
        let len: Int32 = try readInt(&buf)
        var seq = [Data]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterData.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringSequenceString: FfiConverterRustBuffer {
    public static func write(_ value: [String: [String]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterSequenceString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: [String]] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: [String]]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterSequenceString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}
public func generateCircomProof(zkeyPath: String, circuitInputs: String, proofLib: ProofLib)throws  -> CircomProofResult  {
    return try  FfiConverterTypeCircomProofResult_lift(try rustCallWithError(FfiConverterTypeMoproError_lift) {
    uniffi_semaphore_bindings_fn_func_generate_circom_proof(
        FfiConverterString.lower(zkeyPath),
        FfiConverterString.lower(circuitInputs),
        FfiConverterTypeProofLib_lower(proofLib),$0
    )
})
}
public func generateHalo2Proof(srsPath: String, pkPath: String, circuitInputs: [String: [String]])throws  -> Halo2ProofResult  {
    return try  FfiConverterTypeHalo2ProofResult_lift(try rustCallWithError(FfiConverterTypeMoproError_lift) {
    uniffi_semaphore_bindings_fn_func_generate_halo2_proof(
        FfiConverterString.lower(srsPath),
        FfiConverterString.lower(pkPath),
        FfiConverterDictionaryStringSequenceString.lower(circuitInputs),$0
    )
})
}
public func generateNoirProof(circuitPath: String, srsPath: String?, inputs: [String])throws  -> Data  {
    return try  FfiConverterData.lift(try rustCallWithError(FfiConverterTypeMoproError_lift) {
    uniffi_semaphore_bindings_fn_func_generate_noir_proof(
        FfiConverterString.lower(circuitPath),
        FfiConverterOptionString.lower(srsPath),
        FfiConverterSequenceString.lower(inputs),$0
    )
})
}
public func generateSemaphoreProof(identity: Identity, group: Group, message: String, scope: String, merkleTreeDepth: UInt16)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeProofError_lift) {
    uniffi_semaphore_bindings_fn_func_generate_semaphore_proof(
        FfiConverterTypeIdentity_lower(identity),
        FfiConverterTypeGroup_lower(group),
        FfiConverterString.lower(message),
        FfiConverterString.lower(scope),
        FfiConverterUInt16.lower(merkleTreeDepth),$0
    )
})
}
/**
 * You can also customize the bindings by #[uniffi::export]
 * Reference: https://mozilla.github.io/uniffi-rs/latest/proc_macro/index.html
 */
public func moproUniffiHelloWorld() -> String  {
    return try!  FfiConverterString.lift(try! rustCall() {
    uniffi_semaphore_bindings_fn_func_mopro_uniffi_hello_world($0
    )
})
}
public func verifyCircomProof(zkeyPath: String, proofResult: CircomProofResult, proofLib: ProofLib)throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeMoproError_lift) {
    uniffi_semaphore_bindings_fn_func_verify_circom_proof(
        FfiConverterString.lower(zkeyPath),
        FfiConverterTypeCircomProofResult_lower(proofResult),
        FfiConverterTypeProofLib_lower(proofLib),$0
    )
})
}
public func verifyHalo2Proof(srsPath: String, vkPath: String, proof: Data, publicInput: Data)throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeMoproError_lift) {
    uniffi_semaphore_bindings_fn_func_verify_halo2_proof(
        FfiConverterString.lower(srsPath),
        FfiConverterString.lower(vkPath),
        FfiConverterData.lower(proof),
        FfiConverterData.lower(publicInput),$0
    )
})
}
public func verifyNoirProof(circuitPath: String, proof: Data)throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeMoproError_lift) {
    uniffi_semaphore_bindings_fn_func_verify_noir_proof(
        FfiConverterString.lower(circuitPath),
        FfiConverterData.lower(proof),$0
    )
})
}
public func verifySemaphoreProof(proof: String)throws  -> Bool  {
    return try  FfiConverterBool.lift(try rustCallWithError(FfiConverterTypeProofError_lift) {
    uniffi_semaphore_bindings_fn_func_verify_semaphore_proof(
        FfiConverterString.lower(proof),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_semaphore_bindings_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_semaphore_bindings_checksum_func_generate_circom_proof() != 60346) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_func_generate_halo2_proof() != 359) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_func_generate_noir_proof() != 28617) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_func_generate_semaphore_proof() != 57599) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_func_mopro_uniffi_hello_world() != 1550) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_func_verify_circom_proof() != 34655) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_func_verify_halo2_proof() != 61057) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_func_verify_noir_proof() != 51214) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_func_verify_semaphore_proof() != 15374) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_method_group_add_member() != 10331) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_method_group_add_members() != 24106) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_method_group_depth() != 3770) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_method_group_index_of() != 30216) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_method_group_members() != 44594) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_method_group_remove_member() != 35144) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_method_group_root() != 44358) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_method_group_update_member() != 16541) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_method_identity_commitment() != 6735) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_method_identity_private_key() != 40246) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_method_identity_secret_scalar() != 51556) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_method_identity_to_element() != 19451) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_constructor_group_new() != 52307) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_semaphore_bindings_checksum_constructor_identity_new() != 60550) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureSemaphoreBindingsInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all